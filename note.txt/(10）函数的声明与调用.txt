javascript函数的声明和调用
函数：将一段特定功能的代码打包起来，可以重复使用的代码块。
优点：
（1）使程序更加简洁；
（2）逻辑性更调理；
（3）调用更方便；
（4）维护更加容易；

一、函数的声明方式(创建)
   A.基本语法  
   function  关键字
   function 函数名([参数1],[参数2]....){
      函数体
      [return]  //返回值
   }

    B.字面量定义的形式(匿名函数)
     var 变量=function ([参数1],[参数2]....){
         函数体
        [return]  //返回值
       }

  C.以对象的形式来声明
    //  new 关键字。
 var 变量=new Function([参数1],[参数2]...,"函数体");
（函数体加“”需要调用；不加引号不用调用）

二、函数的调用方式:
    
    A.函数名() 、变量名();
    B.在事件后调用，在a链接处调用，在重定向位置调用；
    C.自调用
     (function  () {alert("111");})();

三、两种声明方式的区别
   1.如果两个函数的命名相同，后面的将会覆盖前面的函数。
   2.以基本语法声明的函数，会在代码运行的时候，提前加载到内存当中，以供以后使用，
     但是以字面量形式命名的函数，会在执行到的时候，才进行赋值。
   3.在不同的<script></script>块中的函数，使用和调用的时候，应该先定义，后执行。
函数{
		1、声明方式{
			a、基本语法
			function aa(){}
			b、字面量形式声明
			var aa=function(){}
			c、对象形式声明
			var aa=new Function()
		}
		2、调用方式{
			a、函数名() 变量名()
			b、事件后、a链接、form表单
			c、自调用{
				(function aa(){})()
				(function(){})()
				var aa=function(){}()
			}
		}
		3、2个声明方式区别{
		指基本语法与字面量形式的区别
		{
			a、函数名相同，后面的覆盖前面的；
			b、基础语法声明的函数会提前解析到内存，所以调用可以写在前面；其他的不可以；
			c、不同script标签对中，函数先声明后调用；
		}
		}
	}

函数总结：
函数{
1、声明方式{
	(1)基本语法
	function aa(){}
	(2)字面量形式(匿名函数)
	var aa=function(){}
	(3)对象形式
	var aa=new Function()
}
2、调用方式{
	(1)函数名() 变量名()
	(2)事件后  a链接  重定向
	(3)自调用{
		(function aa(){})()
		(function(){})()
		var aa=function(){}()
	}
}
3、基本语法与字面量方式区别{
	(1)函数名相同，后覆盖前
	(2)基础语法预解析
	(3)不同script块中，函数先声明后调用；
}
4、参数{
	(1)作用
	(2)形参 声明函数的时候，小括号例的值
	(3)实参 调用函数的时候，小括号例的值
	(4)参数特点：任何的数据类型
	(5)形参与实参对应情况{
		a、实与形一一对应；
		b、形>实：多出的形参自动赋值为undefined；
		c、实>形：多出的实参用arguments对象访问
	}
}
5、arguments对象{
	(1)定义：每个函数自带arguments对象
	(2)属性{
		length：实参个数
		callee：返回函数体本身
		[0]:下标，从0开始
	}
}
6、函数重载{
	根据实参的数量和类型的不同，执行不同的函数体
}
7、return返回值{
	(1)跳出当前函数体{
		a、返回值后的内容都不执行；
		b、返回值只返回一个；
	}
	(2)给函数一个返回值{
		a、任何数据类型
		b、返回值只执行一个
		c、如果函数无返回值，自动赋值为undefined
	}
}
8、变量作用域{
	(1)全局变量{
		a、在函数最外层
		b、未声明却赋值
	}
	(2)局部变量{
		a、在函数体内部
		b、参数
	}
	(3)全局变量概念：在代码的任何位置都能访问的变量，拥有全局作用域；
	局部变量概念：在函数内部能访问的变量，拥有局部作用域；
}
9、环境{
	(1)宿主环境[浏览器]
	(2)执行环境[作用域]{
		a、全局环境
		b、局部环境
	}
}
10、预解析{
	(1)概念：var function 
	(2)步骤{
		a、查找var function；
		b、赋值{
			var undefined
			function 函数体
		}
		c、预解析结束，改值；
	}
	(3)原则{
		a、变量或函数重名，后面的覆盖前面的；
		b、变量与函数重名，保留函数；
		c、从上到下、从里到外；
	}
}
11、callback(回调函数){
	(1)概念：把一个函数的指针当作另一个函数的参数来调用，当调用这个函数的时候，这个函数就是回调函数
	(2)方式{
		a、通过指针来调用
		b、通过匿名函数的方式调用
		c、自调用
	}
}
12、递归函数{
	函数自己调用自己
	{
		a、结束值；
		b、调用自己时要么递增要么递减；
	}
}
13、闭包函数{
	(1)概念
	(2)特点{
		a、b函数嵌套在一个a函数内部
		b、a函数返回b；
	}
	(3)用途{
		a、返回局部变量
		b、始终保存在内存中
	}
}
14、内置顶层函数{
	(1)概念：js自带、可在代码任何位置访问的函数
	(2)类型{
		escape()
		unescape()
		Number()
		String()
		Boolean()
		parseInt()
		parseFloat()
		isNaN()
	}
}
}